* 변환 문자열 = 서식 문자(Conversion specifier)
  - 출력하고자 하는 변수의 출력 형태를 지정하기 위해 사용
  - %c: 단일 문자, ''이용
  - %s: 문자열, ""이용, 자동으로 문자열 끝에는 \0(NULL = 0)문자 붙어서
문자열의 끝을 가리킴, 널문자를 넣을 공간 필요, 단일 문자의 집합
-> ex. "abc" 문자열의 길이는 4byte.
  - %f: 부호 있는 10진 실수
  - %d: 부호 있는 10진 정수
  - %u: 부호 없는 10진 정수
  - %x: 부호 없는 16진 정수

* Data type
  - int integer 정수 4byte, 최대 4G(10^9)까지 표현 가능
	-> K(10^3), M(10^6), G(10^9), T(10^12) = 물론 정확히는 2의 제곱
  - float float 실수 4byte, 정수부와 소수부를 합쳐 유효숫자라고 하고,
지수부(e)로 더 크게 표현, Truncation Error 존재.
  - char character 문자 1byte(데이터의 기본단위인), 
정수처럼 사용 가능(다른 언어에 비해 유용,허용은 가능하나 
다른 언어를 사용할 때 불편하기에 사용하지 말기)
 

# 2강. 변수와 연산자
## 3장. 변수와 연산자
* 연산자란 무엇인가?
  - 연산을 요구할 때 사용되는 기호
  - ex: + - * /

* 변수란 무엇인가?
  - 데이터를 저장할 수 있는 메모리 공간에 붙여진 이름

* 다양한 형태(자료형)의 변수
  - 정수형: char, int, long
	-> 과거 int가 2byte였기 때문에, long으로 4byte 표현
  - 실수형: float(4byte), double(8byte)
	-> 주의 필요
  - 문자열은 알 수 없음.(가변적인 길이의 문자열 다루는 경우가 많음)
	-> 배열(문자의 집합)의 필요성
	-> 배열을 다루기 위한 포인터의 필요성
### ASCII code
  - 숫자(10개) "123"과 알파벳(대소문자 52개) "abc", 키보드 특수문자 약 
20여 개와 그외 특수문자(통신 관련), 기호 등 128개 문자는 한 글자에 1byte, 
해당 문자들을 ASCII코드라고 함.
  - 한글, 한자 등은 유니코드
  - 유니코드: 2byte 코드 체계, 라이브러리와 운영체제에 반영되어 있음.
  - DB는 기본적으로 ASCII 코드 체계, 한글 사용 시 문제 발생 가능성.

* 변수의 선언 및 대입
  - 대입 연산자(=): 값을 대입하기 위한 용도의 연산자
	-> 변수 = Value

* 변수 선언 시 주의사항 1 (최근 나온 언어는 안 맞을 수도 있음)
  - 변수, 함수는 사용되기 전, 선언되어 있어야 한다.
	-> 선언 후 사용해야!
  - 변수를 함수 내에 선언할 경우, 등장 위치!
 
* 변수 선언 시 주의사항 2 - naming
  - 첫째: 변수의 이름은 알파벳, 숫자 언더바(_)로 구성
	-> _age, a_bc 가능
  - 둘째: 대 소문자 구분
	-> int num, int Num 가능
  - 셋째: 변수의 이름은 숫자로 시작 불가, 키워드 사용 불가
	-> 12year, 60chicken 불가능
  - 넷째: 공백이 포함될 수 없음
	적절치 않은 변수 이름	이유
	int 7th_val		변수의 이름이 숫자로 시작
	int live_inthe#		#과 같은 특수 문자는 올 수 없다.
	int kor year		변수 이름에 공백이 삽입될 수 없다.

* 상수 Constant
  - 프로그램 내에 직접 숫자가 들어가 있는 것.
  - 변하지 않음.
  - 메모리 공간을 할당 받으나, 데이터의 변경은 불가능하다.

* 대입 연산자와 산술 연산자
  - 대입 연산자만 결합성이 왼쪽으로.
  - '=' 대입
  - '+' 덧셈
  - '-' 뺄셈
  - '*' 곱셈
  - '/' 나눈셈
  - '%' 나머지

* 기타 대입 연산자
  - 대입 연산자와 산술 연산자가 합해져서 다양한 형태의 대입 연산자 정의
  - a = a + b;	->	a += b;
  - a = a - b;	->	a -= b;
  - a = a * b;	->	a *= b;
  - a = a / b;	->	a /= b;
  - a = a % b;	->	a %= b;

* 부호 연산으로서 +, - 연산자
  - 증가 감소 연산자
    -> ++a: 선 증가, 후 연산
    -> a++: 선 연산, 후 증가
    -> --b: 선 감소, 후 연산
    -> b--: 선 연산, 후 감소

* 관계 연산자(비교 연산자)
  - 두 피 연산자의 관계(크다, 작다 혹은 같다)를 따지는 연산자
  - true(논리적 참, 1), false(논리적 거짓, 0) 반환
  - <, > 는 greater than, little than -> gt, lt
  - ==, !=은 equal, not equal -> eq, ne
  - <=, >=은 little or equal, greater or equal -> le, ge
  - 왼쪽이 기준(결합성 오른쪽 화살표)			
    -> <		a<b	a가 b보다 작은가		a lt b	
    -> >		a>b	a가 b보다 큰가		a gt b	
    -> ==		a==b	a와 b가 같은가		a eq b	
    -> !=		a!=b	a와 b가 같지 않은가	a ne b	
    -> <=		a<=b	a가 b보다 작거나 같은가	a le b	
    -> >=		a>=b	a가 bqhek 크거나 같은가	a ge b	

* 논리연산자
  - 논리곱and, 논리합or, 논리부정not
  - true(1), false(0) 반환
  - |: vertical bar
    -> &&	a&&b	둘다 true여야 true 리턴
    -> ||		a||b	하나라도 true면 true 리턴
    -> !		!a	true면 false, false면 true 리턴

* 비트 단위 연산자
  - 산술연산 카테고리
  - 데이터와 데이터 결합
  - ~, &, ^, |, <<, >>

* 콤마(,) 연산자
  - 둘 이상의 변수 동시 선언 시
  - 둘 이상의 문장을 한 줄에 선언 시
  - 함수의 매개변수 전달 시

* 연산자의 우선 순위
  - 연산 순서를 결정짓는 순위

* 연산자의 결합성
  - 우선 순위가 같은 연산자들의 연산 방향
	-> 3+4*5/2-10 = 3
* C 언어의 키워드들
  - Data type:	
->double, int, long, char, float
->bool(논리 변수 타입, int와 동격), 
short(int 4byte되면서 int를 2byte로 짠 프로그램 에러나서 2byte int인 
short나옴, unicode),
const, signed(부호O), unsigned(부호X), void
  - 변수의 위치: extern, static
  - 그 외 struct, else, switch, break, enum, typedef, case, union, for, continue,
goto, default, if, sizeof, while, do, inline
  - 그 중 struct, enum typedef, union은 구조체에 사용

* Visual Studio
-  헤더파일 경로 
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community
\VC\Tools\MSVC\14.29.30037\include

```C
#include <stdio.h>

int main()
{
	// char, short, int, long, float, double 변수를 선언하고
	// 해당 data type의 byte 수를 출력하시오.
	char ch = 'a';
	short sho = 1;
	int age = 10;
	long lo = 123456789;
	float pi = 3.141592;
	double db = 1.414;
	printf("ch = %5c	sizeof(ch) = %d\n", ch, sizeof(ch));
	printf("sho = %5d	sizeof(sho) = %d\n", sho, sizeof(sho));
	printf("age = %5d	sizeof(age) = %d\n", age, sizeof(age));
	printf("lo = %5d	sizeof(lo) = %d\n", lo, sizeof(lo));
	printf("flo = %5f	sizeof(flo) = %d\n", pi, sizeof(pi));
	printf("db = %5lf	sizeof(db) = %d\n", db, sizeof(db));
}
```


## 4장. 데이터 표현 방식의 이해
* 진법에 대한 이해
  - n 진수 표현 방식: n개의 문자를 이용해서 데이터를 표현
  - 2진수, 10진수, 16진수

* 2진수와 10진수
  - 10진수: 0~9를 이용한 데이터의 표현
  - 2진수: 0, 1을 이용한 데이터의 표현
  - 컴퓨터는 내부적으로 모든 데이터를 2진수로 처리

* 16진수와 10진수
  - 16진수: 0~9, a~f를 이용한 데이터의 표현

* 데이터의 표현 단위인 bit와 byte
  - bit: 데이터 표현의 최소 단위, 2진수 값 하나(0 or 1)을 저장
  - byte: 8bit = 1byte

* 연습문제
  - 0000 0000: 0
  - 0000 0001: 1
  - 0000 0010: 2
  - 0000 0100: 4
  - 0000 1000: 8
  - 0001 0000: 16
  - 0010 0000: 32
  - 0100 0000: 64
  - 1000 0000: 128

* 프로그램 상에서의 8진수, 16진수 표현
  - 8진수: 0으로 시작, 2진수를 세 자리씩 끊어 씀.
  - 16진수: 0x으로 시작, 2진수를 네 자리씩 끊어 씀.
	-> 그냥 숫자는 10진수
	-> 0x로 시작하는 숫자는 16진수
	-> 0으로 시작하는 숫자는 8진수

* 정수의 표현 방식
  - MSB: 가장 왼쪽 비트, 부호를 표현, 최상위 비트
  - MSB를 제외한 나머지 비트: 데이터의 크기 표현
  - 부호가 필요 없는 수: unsigned(무조건 양수로만 쓰겠다)
-> 최상위비트까지 숫자표현에 들어갈 수 있다
-> 부호를 표현하고 있는 수보다 2배 더 많은 수를 표현 가능

* 비트 연산
  - 컴퓨터의 내부 데이터 표현 방식인 bit 단위의 연산
  - &(and), |(or), !(not)
  - 디지털 논리회로: AND, OR, NOT, XOR

* 비트 단위 연산자의 종류
  - &: 비트 단위 AND
  - |: 비트 단위 OR
  - ^: 비트 단위 XOR, 배타적논리합, Exclusive OR, 두 피연산자 달라야 True
  - ~: 비트 단위 NOT
  - <<: 왼쪽으로 이동, SHL, *2
  - >>: 오른쪽으로 이동, SHR, /2
    -> SHL, SHR은 C에서만 쓰임!

## 5장. 상수와 기본 자료형
* 자료형 선택의 기준
  - 정수형 데이터를 처리하는 경우
    - 컴퓨터는 내부적으로 int형 연산을 가장 빠르게 처리,
따라서 정수형 변수는 int형으로 선언
    - 범위가 int형 변수를 넘어가는 경우 long형으로 선언
    - 값의 범위가 -128 ~ +127 사이라 할지라도 int형으로 선언

  - 실수형 데이터를 처리하는 경우
    - 선택의 지표는 정밀도
    - 정밀도란 오차 없이 표현 가능한 정도를 의미
    - 일반적 선택은 double
	-> float: 소수 이하 6자리
	-> double: 소수 이하 15자리
	-> long double: double의 정밀도와 같거나 큼
* unsigned가 붙어서 달라지는 표현의 범위
  - MSB까지도 데이터의 크기를 표현하는 데 사용
  - 양의 정수로 인식
  - 실수형 자료형에는 붙일 수 없음

* 리터럴 Literal 상수
  - 이름을 지니지 않는 상수

* 리터럴 상수의 기본 자료형
  - 상수도 메모리 공간에 저장되기 위해서 자료형이 결정된다.

* 접미사에 따른 다양한 상수의 표현
  - u or U: 	unsigned int	304U
  - l or L: 	long		304L
  - ul or UL: 	unsigned long	304UL
  - f or F: 	float		3.15F
  - l or L: 	long double	3.15L

* 심볼릭 상수
  - 이름을 지니는 상수

* 심볼릭 상수를 정의하는 방법
  - const 키워드를 통한 변수의 상수화
  - 매크로를 이용한 상수의 정의

* const 키워드 써야 하는 경우 
  - 라이브러리와의 인터페이스를 위해 const 사용. 
  - SDK(벤더가 지원하는 라이브러리)

* const 키워드에 의한 상수화
``` C
int main(void)
{
	const int MAX = 100; // MAX는 상수 취급, Overwrite 불가
	const double PI = 3.1415;
	MAX = 200; // 불가능
}
```

* 잘못된 상수 선언
``` C
int main(void)
{
	const int MAX;
	MAX = 100;
}
```

* 자료형 변환(Casting)의 두 가지 형태
  - 자동 형 변환 ****
    -> 자동적으로 발생하는 형태의 변환을 의미
    -> 묵시적 형 변환이리고도 표현
    -> ex. int a; float b; char c;
	-> a*b, b*c, c*a에서 자동으로 형 변환 수행될 때
  - 강제 형 변환
    -> 프로그래머가 명시적으로 형 변환을 요청하는 형태의 변환
    -> 명시적 형 변환이라고도 표현

* 자동 형 변환이 발생하는 상황
  - 대입 연산 시
```C
int main(void)
{
	int n=5.25;  // 소수부의 손실
	double=3;  // 값의 표현이 넓은 범위로의 변환(double로)
	char c=129; // 상위 비트의 손실(char는 -128 ~ 127)
}
```

  - 정수의 승격에 의해(int형 연산이 빠른 이유)
  - 정수형 연산 자체를 단일화시킨 결과
``` C
int main(void)
{
	char c1=10, c2=20;  // char는 1byte, 프로세서는 64byte
	char c3=c1+c2;       // 연산 효율이 떨어지게 됨.
}			// 내부적으로 속도를 위해 integer
```

  - 산술 연산 과정에 의해
``` C
int main(void)
{
	double e1 = 5.5 + 7;   // double + int
	double e2 = 3.14f + 5.25;  // float + double
}
```

* 산술 연산 형 변환 규칙
  - 데이터의 손실이 최소화되는 방향으로...
  - char -> int -> long -> float -> double -> long double
  - 자동으로 된다고 해도 데이터 검증 필요, 에러 가능

* 강제 형 변환 
  - 프로그래머의 요청에 의한 형 변환
  - Cast 연산자
  - 검증 필요
-> float f = (float)3.14; // 3.14를 float 형으로 형 변환
-> double e1 = 3 + 3.14;  // 정수 3이 double 형으로 자동 형 변환
-> double e2 = 3 + (int)3.14;  // 3.14가 int형으로 강제 형 변환


